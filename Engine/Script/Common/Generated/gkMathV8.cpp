/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */
#define SWIG_V8
#define SWIG_V8_GCPAD 1024

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* --------------------------------------------------------------------------
 *
 * v8run.swg
 *
 * ------------------------------------------------------------------------- */
#include <v8.h>
#include <stdio.h>
#include <stdarg.h>
#include <map>

/* Method or global function */
typedef struct V8_Function
{
    const char *name;
    v8::InvocationCallback func;
} V8_Function;

/* Global or member get/set  */
typedef struct V8_GetSetter
{
    const char *name;
    v8::AccessorGetter getf;
    v8::AccessorSetter setf;
    v8::AccessControl accm;
    v8::PropertyAttribute prop;
} V8_GetSetter;

/* Class definition */
typedef struct V8_Class
{
    const char *name;
    swig_type_info **type;
    v8::InvocationCallback ctor;
    V8_Function *methods;
    V8_GetSetter *members;
    V8_Class **bases;
    const char **base_names;
    int size;
    v8::Persistent<v8::FunctionTemplate> tmpl;
} V8_Class;

#define V8_SCOPE_LOCK v8::HandleScope ___scope___;

namespace v8 {
template <typename T>
class GarbageCollector {
    // Collect pointers to prevent memory leaks.
    // When V8 runs a GC cycle, allocated objects  
    // will be removed with a call to __removeWeakRef__
    // At exit this class will remove any stragglers
public:
    typedef T *PointerObject;
    typedef std::map<PointerObject, int> ReferenceMap;
    typedef typename ReferenceMap::iterator Iterator;

private:
    ReferenceMap __ref;
    // destroy any remaining objects
    ~GarbageCollector() {
        if (!__ref.empty())
        {
            Iterator it = __ref.begin(), end = __ref.end();
            while (it != end)
            {
                if (it->first)
                    delete it->first;
                ++it;
            }
            __ref.clear();
        }
    }
    static GarbageCollector &get(void) {
        static GarbageCollector m_gc;
        return m_gc;
    }
    // Tell V8 the size of the allocation 
    // Plus any extra padding to speed up a collection cycle
    void __add__(void) {
        int __exsize = (int)sizeof(T);
        __exsize += SWIG_V8_GCPAD;
        V8::AdjustAmountOfExternalAllocatedMemory(__exsize);
    }
    void __sub__(void) {
        int __exsize = (int)sizeof(T);
        __exsize += SWIG_V8_GCPAD;
        V8::AdjustAmountOfExternalAllocatedMemory(-__exsize);
    }
    void __insert__(PointerObject obj) {
        if (obj != 0) {
            Iterator it = __ref.find(obj);
            if (it == __ref.end()) {
                __ref.insert(std::make_pair(obj, (int)1));
                __add__();
            }
        }
    }
    void __remove__(PointerObject obj) {
        if (obj != 0) {
            Iterator it = __ref.find(obj);
            if (it != __ref.end()) {
                delete obj;
                __ref.erase(it);
                __sub__();
            }
        }
    }
    static void __removeWeakRef__(Persistent<Value> obj, void* ptr) {
        obj.ClearWeak();
        if (ptr) get().__remove__((PointerObject)ptr);
    }
public:
    static Handle<Value> insert(PointerObject ptr, swig_type_info *type, int own) {
        V8_Class *cls = (V8_Class *)type->clientdata;
        if (!cls || cls->tmpl.IsEmpty()) {
            return v8::Undefined();
        }
        v8::Local<v8::ObjectTemplate> proto = cls->tmpl->PrototypeTemplate();
        v8::Persistent<v8::Object> obj = v8::Persistent<v8::Object>::New(proto->NewInstance());
        if (obj.IsEmpty())
            return v8::Undefined();
        obj->SetInternalField(0, v8::External::New(ptr));
        if (own) {
            get().__insert__(ptr);
            obj.MakeWeak(ptr, __removeWeakRef__);
        }
        return obj;
    }
};
template<typename T>
static Handle<Value> AddGarbageCollectedObject(T *ptr, swig_type_info *type, int own) {
    return GarbageCollector<T>::insert(ptr, type, own);
}
}
/* ----------------------------------------------------------------------- */
class V8String {
    // Temporary string access 
private:
    char *str;
    int len;
public:
    V8String() : str(0), len(0) {}
    V8String(const v8::Local<v8::Value> &arg)
    {
        v8::Local<v8::String> vstr = arg->ToString();
        v8::String::AsciiValue val(vstr);
        len = vstr->Length();
        str = new char[len + 1];
        memcpy(str, (*val), len);
        str[len] = 0;
    }
    V8String(const V8String &o) { *this = o; }
    V8String &operator =(const V8String &o)
    {
        len = o.len;
        str = new char[len+1];
        memcpy(str, o.str, len);
        str[len] = 0;
        return *this;
    }
    ~V8String() {delete []str;}
    operator char *() { return str; }
};
/* ----------------------------------------------------------------------- */
SWIGRUNTIME bool
V8_ValidSelf(const v8::AccessorInfo &inf)
{
    v8::Local<v8::Object> self = inf.Holder();
    if (!self.IsEmpty()) {
        v8::Local<v8::External> obj = v8::Local<v8::External>::Cast(self->GetInternalField(0));
        return !obj.IsEmpty() && obj->Value() != 0;
    }
    return false;
}
/* -----------------------------------------------------------------------
 * Error format util
 */
SWIGRUNTIME v8::Handle<v8::Value>
V8_Error(const char *fmt, ...)
{
#define V8_ErrMax 0xFFFF
    static char errbuf[V8_ErrMax + 1];
    va_list lst;
    va_start(lst, fmt);
    int size = vsnprintf(errbuf, V8_ErrMax, fmt, lst);
    va_end(lst);
    if (size < 0) { errbuf[V8_ErrMax] = 0; size = V8_ErrMax; }
    errbuf[size] = 0;
    return v8::ThrowException(v8::String::New(errbuf));
#undef V8_ErrMax
}


/* -----------------------------------------------------------------------
 * Extract 'self' pointer from accessor
 */
SWIGRUNTIME bool
V8_ConvertPtr(const v8::AccessorInfo &info, void **ptrptr)
{
    v8::Local<v8::Object> self = info.Holder();
    v8::Local<v8::External> wrap = v8::Local<v8::External>::Cast(self->GetInternalField(0));
    if (ptrptr)
        (*ptrptr) = wrap->Value();
    return ptrptr && (*ptrptr) != 0;
}
/* -----------------------------------------------------------------------
 * Extract 'self' pointer from function arguments
 */
SWIGRUNTIME bool
V8_ConvertPtr(const v8::Arguments &self, void **ptrptr)
{
    v8::Local<v8::Object> obj = self.Holder();
    v8::Local<v8::External> wrap = v8::Local<v8::External>::Cast(obj->GetInternalField(0));
    if (ptrptr)
        (*ptrptr) = wrap->Value();
    return ptrptr && (*ptrptr) != 0;
}
/* -----------------------------------------------------------------------
 * Extract 'self' pointer from specific argument
 */
SWIGRUNTIME bool
V8_ConvertPtr(const v8::Local<v8::Value> &self, void **ptrptr)
{
    if (!self->IsObject())
        return false;
    v8::Local<v8::External> wrap = v8::Local<v8::External>::Cast(self->ToObject()->GetInternalField(0));
    if (ptrptr)
        (*ptrptr) = wrap->Value();
    return ptrptr && (*ptrptr) != 0;
}

/* ------------------------------------------------------------------------- */
#define SWIG_ConvertPtr(I, O) V8_ConvertPtr(I, O)
#define SWIG_GetModule(clientdata) 0
#define SWIG_SetModule(clientdata, pointer)
/* ------------------------------------------------------------------------- */
#define SWIG_ArgCheck(name, exp) \
{\
  if (args.Length() != exp)\
    return V8_Error("Error in function '%s'.\n\tExpected '%d' arguments, found %d.", name,exp,args.Length()); \
}
#define SWIG_ArgCheckFail(name, exp, idx) \
{\
  return V8_Error("Error in function '%s'.\n\tExpected '%s', for parameter %d.", name, exp, idx); \
}
#define SWIG_PtrCheckFail(name) \
{\
  return V8_Error("Error in function '%s'.\n\tFound invalid pointer.", name); \
}
#define SWIG_PtrCheckFailV(name) \
{\
    V8_Error("Error in function '%s'.\n\tFound invalid pointer.", name); \
    return;\
}
#define SWIG_ArgCheckFailV(name, exp, idx) \
{\
  V8_Error("Error in function '%s'.\n\tExpected '%s', for parameter %d.", name, exp, idx);\
    return;\
}
/* -------------------------------------------------------------------------
 * Check functions
 */
SWIGRUNTIME bool
V8_IsNumber(const v8::Arguments &self, int idx) {
    return self[idx]->IsNumber();
}
SWIGRUNTIME bool
V8_IsString(const v8::Arguments &self, int idx) {
    return self[idx]->IsString();
}
SWIGRUNTIME bool
V8_IsBool(const v8::Arguments &self, int idx) {
    return self[idx]->IsBoolean();
}
SWIGRUNTIME bool
V8_IsObject(const v8::Arguments &self, int idx) {
    return self[idx]->IsObject();
}
SWIGRUNTIME bool
V8_IsFunction(const v8::Arguments &self, int idx) {
    if (V8_IsObject(self, idx))
        return self[idx]->ToObject()->IsFunction();
    return false;
}
SWIGRUNTIME bool
V8_IsNumber(const v8::Local<v8::Value> &val, int idx) {
    return val->IsNumber();
}
SWIGRUNTIME bool
V8_IsString(const v8::Local<v8::Value> &val, int idx) {
    return val->IsString();
}
SWIGRUNTIME bool
V8_IsBool(const v8::Local<v8::Value> &val, int idx) {
    return val->IsBoolean();
}
SWIGRUNTIME bool
V8_IsObject(const v8::Local<v8::Value> &val, int idx) {
    return val->IsObject();
}
SWIGRUNTIME bool
V8_IsFunction(const v8::Local<v8::Value> &val, int idx) {
    if (val->IsObject())
        return val->ToObject()->IsFunction();
    return false;
}

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_gksQuaternion swig_types[0]
#define SWIGTYPE_p_gksVector3 swig_types[1]
static swig_type_info *swig_types[3];
static swig_module_info swig_module = {swig_types, 2, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "Math"
#define SWIG_init      Math_OpenV8

#include "gksMath.h"

static void _wrap_Vector3_x_set(v8::Local<v8::String> prop, v8::Local<v8::Value> args, const v8::AccessorInfo& inf){
  gksVector3 *arg1 = (gksVector3 *) 0 ;
  float arg2 ;
  
  if(!V8_IsNumber(args, 1)){
    SWIG_ArgCheckFailV("x","float",2);
  }
  if (!SWIG_ConvertPtr(inf,(void**)&arg1)) {
    SWIG_PtrCheckFailV("x");
  }
  arg2 = (float)args->NumberValue();
  if (arg1) (arg1)->x = arg2;
  
}


static v8::Handle<v8::Value> _wrap_Vector3_x_get(v8::Local<v8::String> prop, const v8::AccessorInfo& inf){
  gksVector3 *arg1 = (gksVector3 *) 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(inf,(void**)&arg1)) {
    SWIG_PtrCheckFail("x");
  }
  result = (float) ((arg1)->x);
  return v8::Number::New(result);
}


static void _wrap_Vector3_y_set(v8::Local<v8::String> prop, v8::Local<v8::Value> args, const v8::AccessorInfo& inf){
  gksVector3 *arg1 = (gksVector3 *) 0 ;
  float arg2 ;
  
  if(!V8_IsNumber(args, 1)){
    SWIG_ArgCheckFailV("y","float",2);
  }
  if (!SWIG_ConvertPtr(inf,(void**)&arg1)) {
    SWIG_PtrCheckFailV("y");
  }
  arg2 = (float)args->NumberValue();
  if (arg1) (arg1)->y = arg2;
  
}


static v8::Handle<v8::Value> _wrap_Vector3_y_get(v8::Local<v8::String> prop, const v8::AccessorInfo& inf){
  gksVector3 *arg1 = (gksVector3 *) 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(inf,(void**)&arg1)) {
    SWIG_PtrCheckFail("y");
  }
  result = (float) ((arg1)->y);
  return v8::Number::New(result);
}


static void _wrap_Vector3_z_set(v8::Local<v8::String> prop, v8::Local<v8::Value> args, const v8::AccessorInfo& inf){
  gksVector3 *arg1 = (gksVector3 *) 0 ;
  float arg2 ;
  
  if(!V8_IsNumber(args, 1)){
    SWIG_ArgCheckFailV("z","float",2);
  }
  if (!SWIG_ConvertPtr(inf,(void**)&arg1)) {
    SWIG_PtrCheckFailV("z");
  }
  arg2 = (float)args->NumberValue();
  if (arg1) (arg1)->z = arg2;
  
}


static v8::Handle<v8::Value> _wrap_Vector3_z_get(v8::Local<v8::String> prop, const v8::AccessorInfo& inf){
  gksVector3 *arg1 = (gksVector3 *) 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(inf,(void**)&arg1)) {
    SWIG_PtrCheckFail("z");
  }
  result = (float) ((arg1)->z);
  return v8::Number::New(result);
}


static v8::Handle<v8::Value> _wrap_new_Vector3__SWIG_0(const v8::Arguments &args){
  gksVector3 *result = 0 ;
  
  result = (gksVector3 *)new gksVector3();
  
  return v8::AddGarbageCollectedObject<gksVector3  >(result, SWIGTYPE_p_gksVector3, 1);
  
}


static v8::Handle<v8::Value> _wrap_new_Vector3__SWIG_1(const v8::Arguments &args){
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gksVector3 *result = 0 ;
  
  if(!V8_IsNumber(args, 0)){
    SWIG_ArgCheckFail("gksVector3","float",1);
  }
  if(!V8_IsNumber(args, 1)){
    SWIG_ArgCheckFail("gksVector3","float",2);
  }
  if(!V8_IsNumber(args, 2)){
    SWIG_ArgCheckFail("gksVector3","float",3);
  }
  arg1 = (float)args[0]->NumberValue();
  arg2 = (float)args[1]->NumberValue();
  arg3 = (float)args[2]->NumberValue();
  result = (gksVector3 *)new gksVector3(arg1,arg2,arg3);
  
  return v8::AddGarbageCollectedObject<gksVector3  >(result, SWIGTYPE_p_gksVector3, 1);
  
}


static v8::Handle<v8::Value> _wrap_new_Vector3__SWIG_2(const v8::Arguments &args){
  gksVector3 *arg1 = 0 ;
  gksVector3 *result = 0 ;
  
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("gksVector3");
  }
  result = (gksVector3 *)new gksVector3((gksVector3 const &)*arg1);
  
  return v8::AddGarbageCollectedObject<gksVector3  >(result, SWIGTYPE_p_gksVector3, 1);
  
}


static v8::Handle<v8::Value> _wrap_new_Vector3(const v8::Arguments &args){
  int argc;
  int argv[3]={
    0,1,2
  };
  
  argc = args.Length();
  if (argc == 0) {
    return _wrap_new_Vector3__SWIG_0(args);
  }
  if (argc == 1) {
    int _v;
    
    _v = V8_IsObject(args, argv[0]) ? 1 : 0; 
    
    if (_v) {
      return _wrap_new_Vector3__SWIG_2(args);
    }
  }
  if (argc == 3) {
    int _v;
    
    _v = V8_IsNumber(args, argv[0]) ? 1 : 0;
    
    if (_v) {
      _v = V8_IsNumber(args, argv[1]) ? 1 : 0;
      
      if (_v) {
        _v = V8_IsNumber(args, argv[2]) ? 1 : 0;
        
        if (_v) {
          return _wrap_new_Vector3__SWIG_1(args);
        }
      }
    }
  }
  
  return V8_Error("Wrong arguments for overloaded function 'gksVector3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gksVector3()\n"
    "    gksVector3(float,float,float)\n"
    "    gksVector3(gksVector3 const &)\n");
}


static v8::Handle<v8::Value> _wrap_Vector3___str__(const v8::Arguments &args){
  gksVector3 *arg1 = (gksVector3 *) 0 ;
  char *result = 0 ;
  
  if (!SWIG_ConvertPtr(args,(void**)&arg1)) {
    SWIG_PtrCheckFail("__str__");
  }
  result = (char *)(arg1)->__str__();
  return v8::String::New((const char *)result);
}


static v8::Handle<v8::Value> _wrap_Vector3_normalize(const v8::Arguments &args){
  gksVector3 *arg1 = (gksVector3 *) 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(args,(void**)&arg1)) {
    SWIG_PtrCheckFail("normalize");
  }
  result = (float)(arg1)->normalize();
  return v8::Number::New(result);
}


static v8::Handle<v8::Value> _wrap_Vector3_dot(const v8::Arguments &args){
  gksVector3 *arg1 = (gksVector3 *) 0 ;
  gksVector3 *arg2 = 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(args,(void**)&arg1)) {
    SWIG_PtrCheckFail("dot");
  }
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg2)) {
    SWIG_PtrCheckFail("dot");
  }
  result = (float)(arg1)->dot((gksVector3 const &)*arg2);
  return v8::Number::New(result);
}


static v8::Handle<v8::Value> _wrap_Vector3_cross(const v8::Arguments &args){
  gksVector3 *arg1 = (gksVector3 *) 0 ;
  gksVector3 *arg2 = 0 ;
  gksVector3 result;
  
  if (!SWIG_ConvertPtr(args,(void**)&arg1)) {
    SWIG_PtrCheckFail("cross");
  }
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg2)) {
    SWIG_PtrCheckFail("cross");
  }
  result = (arg1)->cross((gksVector3 const &)*arg2);
  
  gksVector3 * resultptr = new gksVector3((const gksVector3 &) result);
  return v8::AddGarbageCollectedObject<gksVector3 >(resultptr, SWIGTYPE_p_gksVector3, 1);
  
}


static v8::Handle<v8::Value> _wrap_Vector3_length(const v8::Arguments &args){
  gksVector3 *arg1 = (gksVector3 *) 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(args,(void**)&arg1)) {
    SWIG_PtrCheckFail("length");
  }
  result = (float)(arg1)->length();
  return v8::Number::New(result);
}


static v8::Handle<v8::Value> _wrap_Vector3_length2(const v8::Arguments &args){
  gksVector3 *arg1 = (gksVector3 *) 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(args,(void**)&arg1)) {
    SWIG_PtrCheckFail("length2");
  }
  result = (float)(arg1)->length2();
  return v8::Number::New(result);
}


static v8::Handle<v8::Value> _wrap_Vector3_distance(const v8::Arguments &args){
  gksVector3 *arg1 = (gksVector3 *) 0 ;
  gksVector3 *arg2 = 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(args,(void**)&arg1)) {
    SWIG_PtrCheckFail("distance");
  }
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg2)) {
    SWIG_PtrCheckFail("distance");
  }
  result = (float)(arg1)->distance((gksVector3 const &)*arg2);
  return v8::Number::New(result);
}


static v8::Handle<v8::Value> _wrap_Vector3_distance2(const v8::Arguments &args){
  gksVector3 *arg1 = (gksVector3 *) 0 ;
  gksVector3 *arg2 = 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(args,(void**)&arg1)) {
    SWIG_PtrCheckFail("distance2");
  }
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg2)) {
    SWIG_PtrCheckFail("distance2");
  }
  result = (float)(arg1)->distance2((gksVector3 const &)*arg2);
  return v8::Number::New(result);
}



static struct V8_Function v8_gksVector3_Methods[] = {
    {"__str__", _wrap_Vector3___str__}, 
    {"normalize", _wrap_Vector3_normalize}, 
    {"dot", _wrap_Vector3_dot}, 
    {"cross", _wrap_Vector3_cross}, 
    {"length", _wrap_Vector3_length}, 
    {"length2", _wrap_Vector3_length2}, 
    {"distance", _wrap_Vector3_distance}, 
    {"distance2", _wrap_Vector3_distance2}, 
    {0,0}
};

static struct V8_GetSetter v8_gksVector3_Members[] = {
    { "x", _wrap_Vector3_x_get, _wrap_Vector3_x_set, v8::DEFAULT, v8::None},
    { "y", _wrap_Vector3_y_get, _wrap_Vector3_y_set, v8::DEFAULT, v8::None},
    { "z", _wrap_Vector3_z_get, _wrap_Vector3_z_set, v8::DEFAULT, v8::None},
    {0,0,0}
};
static V8_Class *v8_gksVector3_Bases[] = {0};
static const char *v8_gksVector3_BaseNames[] = {0};
static V8_Class v8_wrap_class_gksVector3= { "Vector3",&SWIGTYPE_p_gksVector3, _wrap_new_Vector3,
	v8_gksVector3_Methods, v8_gksVector3_Members, v8_gksVector3_Bases, v8_gksVector3_BaseNames, sizeof(gksVector3)};

static void _wrap_Quaternion_w_set(v8::Local<v8::String> prop, v8::Local<v8::Value> args, const v8::AccessorInfo& inf){
  gksQuaternion *arg1 = (gksQuaternion *) 0 ;
  float arg2 ;
  
  if(!V8_IsNumber(args, 1)){
    SWIG_ArgCheckFailV("w","float",2);
  }
  if (!SWIG_ConvertPtr(inf,(void**)&arg1)) {
    SWIG_PtrCheckFailV("w");
  }
  arg2 = (float)args->NumberValue();
  if (arg1) (arg1)->w = arg2;
  
}


static v8::Handle<v8::Value> _wrap_Quaternion_w_get(v8::Local<v8::String> prop, const v8::AccessorInfo& inf){
  gksQuaternion *arg1 = (gksQuaternion *) 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(inf,(void**)&arg1)) {
    SWIG_PtrCheckFail("w");
  }
  result = (float) ((arg1)->w);
  return v8::Number::New(result);
}


static void _wrap_Quaternion_x_set(v8::Local<v8::String> prop, v8::Local<v8::Value> args, const v8::AccessorInfo& inf){
  gksQuaternion *arg1 = (gksQuaternion *) 0 ;
  float arg2 ;
  
  if(!V8_IsNumber(args, 1)){
    SWIG_ArgCheckFailV("x","float",2);
  }
  if (!SWIG_ConvertPtr(inf,(void**)&arg1)) {
    SWIG_PtrCheckFailV("x");
  }
  arg2 = (float)args->NumberValue();
  if (arg1) (arg1)->x = arg2;
  
}


static v8::Handle<v8::Value> _wrap_Quaternion_x_get(v8::Local<v8::String> prop, const v8::AccessorInfo& inf){
  gksQuaternion *arg1 = (gksQuaternion *) 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(inf,(void**)&arg1)) {
    SWIG_PtrCheckFail("x");
  }
  result = (float) ((arg1)->x);
  return v8::Number::New(result);
}


static void _wrap_Quaternion_y_set(v8::Local<v8::String> prop, v8::Local<v8::Value> args, const v8::AccessorInfo& inf){
  gksQuaternion *arg1 = (gksQuaternion *) 0 ;
  float arg2 ;
  
  if(!V8_IsNumber(args, 1)){
    SWIG_ArgCheckFailV("y","float",2);
  }
  if (!SWIG_ConvertPtr(inf,(void**)&arg1)) {
    SWIG_PtrCheckFailV("y");
  }
  arg2 = (float)args->NumberValue();
  if (arg1) (arg1)->y = arg2;
  
}


static v8::Handle<v8::Value> _wrap_Quaternion_y_get(v8::Local<v8::String> prop, const v8::AccessorInfo& inf){
  gksQuaternion *arg1 = (gksQuaternion *) 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(inf,(void**)&arg1)) {
    SWIG_PtrCheckFail("y");
  }
  result = (float) ((arg1)->y);
  return v8::Number::New(result);
}


static void _wrap_Quaternion_z_set(v8::Local<v8::String> prop, v8::Local<v8::Value> args, const v8::AccessorInfo& inf){
  gksQuaternion *arg1 = (gksQuaternion *) 0 ;
  float arg2 ;
  
  if(!V8_IsNumber(args, 1)){
    SWIG_ArgCheckFailV("z","float",2);
  }
  if (!SWIG_ConvertPtr(inf,(void**)&arg1)) {
    SWIG_PtrCheckFailV("z");
  }
  arg2 = (float)args->NumberValue();
  if (arg1) (arg1)->z = arg2;
  
}


static v8::Handle<v8::Value> _wrap_Quaternion_z_get(v8::Local<v8::String> prop, const v8::AccessorInfo& inf){
  gksQuaternion *arg1 = (gksQuaternion *) 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(inf,(void**)&arg1)) {
    SWIG_PtrCheckFail("z");
  }
  result = (float) ((arg1)->z);
  return v8::Number::New(result);
}


static v8::Handle<v8::Value> _wrap_new_Quaternion__SWIG_0(const v8::Arguments &args){
  gksQuaternion *result = 0 ;
  
  result = (gksQuaternion *)new gksQuaternion();
  
  return v8::AddGarbageCollectedObject<gksQuaternion  >(result, SWIGTYPE_p_gksQuaternion, 1);
  
}


static v8::Handle<v8::Value> _wrap_new_Quaternion__SWIG_1(const v8::Arguments &args){
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  gksQuaternion *result = 0 ;
  
  if(!V8_IsNumber(args, 0)){
    SWIG_ArgCheckFail("gksQuaternion","float",1);
  }
  if(!V8_IsNumber(args, 1)){
    SWIG_ArgCheckFail("gksQuaternion","float",2);
  }
  if(!V8_IsNumber(args, 2)){
    SWIG_ArgCheckFail("gksQuaternion","float",3);
  }
  if(!V8_IsNumber(args, 3)){
    SWIG_ArgCheckFail("gksQuaternion","float",4);
  }
  arg1 = (float)args[0]->NumberValue();
  arg2 = (float)args[1]->NumberValue();
  arg3 = (float)args[2]->NumberValue();
  arg4 = (float)args[3]->NumberValue();
  result = (gksQuaternion *)new gksQuaternion(arg1,arg2,arg3,arg4);
  
  return v8::AddGarbageCollectedObject<gksQuaternion  >(result, SWIGTYPE_p_gksQuaternion, 1);
  
}


static v8::Handle<v8::Value> _wrap_new_Quaternion__SWIG_2(const v8::Arguments &args){
  gksQuaternion *arg1 = 0 ;
  gksQuaternion *result = 0 ;
  
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("gksQuaternion");
  }
  result = (gksQuaternion *)new gksQuaternion((gksQuaternion const &)*arg1);
  
  return v8::AddGarbageCollectedObject<gksQuaternion  >(result, SWIGTYPE_p_gksQuaternion, 1);
  
}


static v8::Handle<v8::Value> _wrap_new_Quaternion(const v8::Arguments &args){
  int argc;
  int argv[4]={
    0,1,2,3
  };
  
  argc = args.Length();
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(args);
  }
  if (argc == 1) {
    int _v;
    
    _v = V8_IsObject(args, argv[0]) ? 1 : 0; 
    
    if (_v) {
      return _wrap_new_Quaternion__SWIG_2(args);
    }
  }
  if (argc == 4) {
    int _v;
    
    _v = V8_IsNumber(args, argv[0]) ? 1 : 0;
    
    if (_v) {
      _v = V8_IsNumber(args, argv[1]) ? 1 : 0;
      
      if (_v) {
        _v = V8_IsNumber(args, argv[2]) ? 1 : 0;
        
        if (_v) {
          _v = V8_IsNumber(args, argv[3]) ? 1 : 0;
          
          if (_v) {
            return _wrap_new_Quaternion__SWIG_1(args);
          }
        }
      }
    }
  }
  
  return V8_Error("Wrong arguments for overloaded function 'gksQuaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gksQuaternion()\n"
    "    gksQuaternion(float,float,float,float)\n"
    "    gksQuaternion(gksQuaternion const &)\n");
}


static v8::Handle<v8::Value> _wrap_Quaternion___str__(const v8::Arguments &args){
  gksQuaternion *arg1 = (gksQuaternion *) 0 ;
  char *result = 0 ;
  
  if (!SWIG_ConvertPtr(args,(void**)&arg1)) {
    SWIG_PtrCheckFail("__str__");
  }
  result = (char *)(arg1)->__str__();
  return v8::String::New((const char *)result);
}


static v8::Handle<v8::Value> _wrap_Quaternion_normalize(const v8::Arguments &args){
  gksQuaternion *arg1 = (gksQuaternion *) 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(args,(void**)&arg1)) {
    SWIG_PtrCheckFail("normalize");
  }
  result = (float)(arg1)->normalize();
  return v8::Number::New(result);
}


static v8::Handle<v8::Value> _wrap_Quaternion_length2(const v8::Arguments &args){
  gksQuaternion *arg1 = (gksQuaternion *) 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(args,(void**)&arg1)) {
    SWIG_PtrCheckFail("length2");
  }
  result = (float)(arg1)->length2();
  return v8::Number::New(result);
}


static v8::Handle<v8::Value> _wrap_Quaternion_dot(const v8::Arguments &args){
  gksQuaternion *arg1 = (gksQuaternion *) 0 ;
  gksQuaternion *arg2 = 0 ;
  float result;
  
  if (!SWIG_ConvertPtr(args,(void**)&arg1)) {
    SWIG_PtrCheckFail("dot");
  }
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg2)) {
    SWIG_PtrCheckFail("dot");
  }
  result = (float)(arg1)->dot((gksQuaternion const &)*arg2);
  return v8::Number::New(result);
}


static v8::Handle<v8::Value> _wrap_Quaternion_inverse(const v8::Arguments &args){
  gksQuaternion *arg1 = (gksQuaternion *) 0 ;
  gksQuaternion result;
  
  if (!SWIG_ConvertPtr(args,(void**)&arg1)) {
    SWIG_PtrCheckFail("inverse");
  }
  result = (arg1)->inverse();
  
  gksQuaternion * resultptr = new gksQuaternion((const gksQuaternion &) result);
  return v8::AddGarbageCollectedObject<gksQuaternion >(resultptr, SWIGTYPE_p_gksQuaternion, 1);
  
}



static struct V8_Function v8_gksQuaternion_Methods[] = {
    {"__str__", _wrap_Quaternion___str__}, 
    {"normalize", _wrap_Quaternion_normalize}, 
    {"length2", _wrap_Quaternion_length2}, 
    {"dot", _wrap_Quaternion_dot}, 
    {"inverse", _wrap_Quaternion_inverse}, 
    {0,0}
};

static struct V8_GetSetter v8_gksQuaternion_Members[] = {
    { "w", _wrap_Quaternion_w_get, _wrap_Quaternion_w_set, v8::DEFAULT, v8::None},
    { "x", _wrap_Quaternion_x_get, _wrap_Quaternion_x_set, v8::DEFAULT, v8::None},
    { "y", _wrap_Quaternion_y_get, _wrap_Quaternion_y_set, v8::DEFAULT, v8::None},
    { "z", _wrap_Quaternion_z_get, _wrap_Quaternion_z_set, v8::DEFAULT, v8::None},
    {0,0,0}
};
static V8_Class *v8_gksQuaternion_Bases[] = {0};
static const char *v8_gksQuaternion_BaseNames[] = {0};
static V8_Class v8_wrap_class_gksQuaternion= { "Quaternion",&SWIGTYPE_p_gksQuaternion, _wrap_new_Quaternion,
	v8_gksQuaternion_Methods, v8_gksQuaternion_Members, v8_gksQuaternion_Bases, v8_gksQuaternion_BaseNames, sizeof(gksQuaternion)};

static v8::Handle<v8::Value> _wrap_Vec3Negate(const v8::Arguments &args){
  gksVector3 *arg1 = 0 ;
  gksVector3 result;
  
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("Vec3Negate");
  }
  result = Vec3Negate((gksVector3 const &)*arg1);
  
  gksVector3 * resultptr = new gksVector3((const gksVector3 &) result);
  return v8::AddGarbageCollectedObject<gksVector3 >(resultptr, SWIGTYPE_p_gksVector3, 1);
  
}


static v8::Handle<v8::Value> _wrap_Vec3AddVec3(const v8::Arguments &args){
  gksVector3 *arg1 = 0 ;
  gksVector3 *arg2 = 0 ;
  gksVector3 result;
  
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("Vec3AddVec3");
  }
  
  if (!SWIG_ConvertPtr(args[1],(void**)&arg2)) {
    SWIG_PtrCheckFail("Vec3AddVec3");
  }
  result = Vec3AddVec3((gksVector3 const &)*arg1,(gksVector3 const &)*arg2);
  
  gksVector3 * resultptr = new gksVector3((const gksVector3 &) result);
  return v8::AddGarbageCollectedObject<gksVector3 >(resultptr, SWIGTYPE_p_gksVector3, 1);
  
}


static v8::Handle<v8::Value> _wrap_Vec3SubVec3(const v8::Arguments &args){
  gksVector3 *arg1 = 0 ;
  gksVector3 *arg2 = 0 ;
  gksVector3 result;
  
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("Vec3SubVec3");
  }
  
  if (!SWIG_ConvertPtr(args[1],(void**)&arg2)) {
    SWIG_PtrCheckFail("Vec3SubVec3");
  }
  result = Vec3SubVec3((gksVector3 const &)*arg1,(gksVector3 const &)*arg2);
  
  gksVector3 * resultptr = new gksVector3((const gksVector3 &) result);
  return v8::AddGarbageCollectedObject<gksVector3 >(resultptr, SWIGTYPE_p_gksVector3, 1);
  
}


static v8::Handle<v8::Value> _wrap_Vec3MulVec3(const v8::Arguments &args){
  gksVector3 *arg1 = 0 ;
  gksVector3 *arg2 = 0 ;
  gksVector3 result;
  
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("Vec3MulVec3");
  }
  
  if (!SWIG_ConvertPtr(args[1],(void**)&arg2)) {
    SWIG_PtrCheckFail("Vec3MulVec3");
  }
  result = Vec3MulVec3((gksVector3 const &)*arg1,(gksVector3 const &)*arg2);
  
  gksVector3 * resultptr = new gksVector3((const gksVector3 &) result);
  return v8::AddGarbageCollectedObject<gksVector3 >(resultptr, SWIGTYPE_p_gksVector3, 1);
  
}


static v8::Handle<v8::Value> _wrap_Vec3DivVec3(const v8::Arguments &args){
  gksVector3 *arg1 = 0 ;
  gksVector3 *arg2 = 0 ;
  gksVector3 result;
  
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("Vec3DivVec3");
  }
  
  if (!SWIG_ConvertPtr(args[1],(void**)&arg2)) {
    SWIG_PtrCheckFail("Vec3DivVec3");
  }
  result = Vec3DivVec3((gksVector3 const &)*arg1,(gksVector3 const &)*arg2);
  
  gksVector3 * resultptr = new gksVector3((const gksVector3 &) result);
  return v8::AddGarbageCollectedObject<gksVector3 >(resultptr, SWIGTYPE_p_gksVector3, 1);
  
}


static v8::Handle<v8::Value> _wrap_Vec3Mulf(const v8::Arguments &args){
  gksVector3 *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  gksVector3 result;
  
  if(!V8_IsNumber(args, 1)){
    SWIG_ArgCheckFail("Vec3Mulf","float const &",2);
  }
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("Vec3Mulf");
  }
  temp2=(float)args[1]->Int32Value(); arg2=&temp2;
  result = Vec3Mulf((gksVector3 const &)*arg1,(float const &)*arg2);
  
  gksVector3 * resultptr = new gksVector3((const gksVector3 &) result);
  return v8::AddGarbageCollectedObject<gksVector3 >(resultptr, SWIGTYPE_p_gksVector3, 1);
  
}


static v8::Handle<v8::Value> _wrap_Vec3Divf(const v8::Arguments &args){
  gksVector3 *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  gksVector3 result;
  
  if(!V8_IsNumber(args, 1)){
    SWIG_ArgCheckFail("Vec3Divf","float const &",2);
  }
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("Vec3Divf");
  }
  temp2=(float)args[1]->Int32Value(); arg2=&temp2;
  result = Vec3Divf((gksVector3 const &)*arg1,(float const &)*arg2);
  
  gksVector3 * resultptr = new gksVector3((const gksVector3 &) result);
  return v8::AddGarbageCollectedObject<gksVector3 >(resultptr, SWIGTYPE_p_gksVector3, 1);
  
}


static v8::Handle<v8::Value> _wrap_QuatNegate(const v8::Arguments &args){
  gksQuaternion *arg1 = 0 ;
  gksQuaternion result;
  
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("QuatNegate");
  }
  result = QuatNegate((gksQuaternion const &)*arg1);
  
  gksQuaternion * resultptr = new gksQuaternion((const gksQuaternion &) result);
  return v8::AddGarbageCollectedObject<gksQuaternion >(resultptr, SWIGTYPE_p_gksQuaternion, 1);
  
}


static v8::Handle<v8::Value> _wrap_QuatAddQuat(const v8::Arguments &args){
  gksQuaternion *arg1 = 0 ;
  gksQuaternion *arg2 = 0 ;
  gksQuaternion result;
  
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("QuatAddQuat");
  }
  
  if (!SWIG_ConvertPtr(args[1],(void**)&arg2)) {
    SWIG_PtrCheckFail("QuatAddQuat");
  }
  result = QuatAddQuat((gksQuaternion const &)*arg1,(gksQuaternion const &)*arg2);
  
  gksQuaternion * resultptr = new gksQuaternion((const gksQuaternion &) result);
  return v8::AddGarbageCollectedObject<gksQuaternion >(resultptr, SWIGTYPE_p_gksQuaternion, 1);
  
}


static v8::Handle<v8::Value> _wrap_QuatSubQuat(const v8::Arguments &args){
  gksQuaternion *arg1 = 0 ;
  gksQuaternion *arg2 = 0 ;
  gksQuaternion result;
  
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("QuatSubQuat");
  }
  
  if (!SWIG_ConvertPtr(args[1],(void**)&arg2)) {
    SWIG_PtrCheckFail("QuatSubQuat");
  }
  result = QuatSubQuat((gksQuaternion const &)*arg1,(gksQuaternion const &)*arg2);
  
  gksQuaternion * resultptr = new gksQuaternion((const gksQuaternion &) result);
  return v8::AddGarbageCollectedObject<gksQuaternion >(resultptr, SWIGTYPE_p_gksQuaternion, 1);
  
}


static v8::Handle<v8::Value> _wrap_QuatMulQuat(const v8::Arguments &args){
  gksQuaternion *arg1 = 0 ;
  gksQuaternion *arg2 = 0 ;
  gksQuaternion result;
  
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("QuatMulQuat");
  }
  
  if (!SWIG_ConvertPtr(args[1],(void**)&arg2)) {
    SWIG_PtrCheckFail("QuatMulQuat");
  }
  result = QuatMulQuat((gksQuaternion const &)*arg1,(gksQuaternion const &)*arg2);
  
  gksQuaternion * resultptr = new gksQuaternion((const gksQuaternion &) result);
  return v8::AddGarbageCollectedObject<gksQuaternion >(resultptr, SWIGTYPE_p_gksQuaternion, 1);
  
}


static v8::Handle<v8::Value> _wrap_QuatMulf(const v8::Arguments &args){
  gksQuaternion *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  gksQuaternion result;
  
  if(!V8_IsNumber(args, 1)){
    SWIG_ArgCheckFail("QuatMulf","float const &",2);
  }
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("QuatMulf");
  }
  temp2=(float)args[1]->Int32Value(); arg2=&temp2;
  result = QuatMulf((gksQuaternion const &)*arg1,(float const &)*arg2);
  
  gksQuaternion * resultptr = new gksQuaternion((const gksQuaternion &) result);
  return v8::AddGarbageCollectedObject<gksQuaternion >(resultptr, SWIGTYPE_p_gksQuaternion, 1);
  
}


static v8::Handle<v8::Value> _wrap_QuatMulVec3(const v8::Arguments &args){
  gksQuaternion *arg1 = 0 ;
  gksVector3 *arg2 = 0 ;
  gksVector3 result;
  
  
  if (!SWIG_ConvertPtr(args[0],(void**)&arg1)) {
    SWIG_PtrCheckFail("QuatMulVec3");
  }
  
  if (!SWIG_ConvertPtr(args[1],(void**)&arg2)) {
    SWIG_PtrCheckFail("QuatMulVec3");
  }
  result = QuatMulVec3((gksQuaternion const &)*arg1,(gksVector3 const &)*arg2);
  
  gksVector3 * resultptr = new gksVector3((const gksVector3 &) result);
  return v8::AddGarbageCollectedObject<gksVector3 >(resultptr, SWIGTYPE_p_gksVector3, 1);
  
}



static const struct V8_Function  v8_globals[] = {
    { "Vec3Negate", _wrap_Vec3Negate},
    { "Vec3AddVec3", _wrap_Vec3AddVec3},
    { "Vec3SubVec3", _wrap_Vec3SubVec3},
    { "Vec3MulVec3", _wrap_Vec3MulVec3},
    { "Vec3DivVec3", _wrap_Vec3DivVec3},
    { "Vec3Mulf", _wrap_Vec3Mulf},
    { "Vec3Divf", _wrap_Vec3Divf},
    { "QuatNegate", _wrap_QuatNegate},
    { "QuatAddQuat", _wrap_QuatAddQuat},
    { "QuatSubQuat", _wrap_QuatSubQuat},
    { "QuatMulQuat", _wrap_QuatMulQuat},
    { "QuatMulf", _wrap_QuatMulf},
    { "QuatMulVec3", _wrap_QuatMulVec3},
    {0,0}
};

static const struct V8_GetSetter v8_constants[] = {
    {0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_gksQuaternion = {"_p_gksQuaternion", "gksQuaternion *", 0, 0, (void*)&v8_wrap_class_gksQuaternion, 0};
static swig_type_info _swigt__p_gksVector3 = {"_p_gksVector3", "gksVector3 *", 0, 0, (void*)&v8_wrap_class_gksVector3, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_gksQuaternion,
  &_swigt__p_gksVector3,
};

static swig_cast_info _swigc__p_gksQuaternion[] = {  {&_swigt__p_gksQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gksVector3[] = {  {&_swigt__p_gksVector3, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_gksQuaternion,
  _swigc__p_gksVector3,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* ------------------------------------------------------------------------- */
SWIGRUNTIME bool
V8_HasBase(swig_type_info *inf) {
  if (inf && inf->clientdata) {
    V8_Class *cls = (V8_Class *)inf->clientdata;
    return cls && cls->bases && cls->bases[0] != 0;
  }
  return false;
}

/* ------------------------------------------------------------------------- */
SWIGRUNTIME swig_type_info *
V8_GetBaseClass(const char *name) {
  int i;
  for (i = 0; swig_types[i]; i++) {
    swig_type_info *inf = swig_types[i];
    V8_Class *cls = (V8_Class *)inf->clientdata;
    if (cls && !strcmp(cls->name, name))
      return inf;
  }
  return 0;
}

/* ------------------------------------------------------------------------- */
SWIGRUNTIME void
V8_BindClass(v8::Persistent<v8::ObjectTemplate>& module, V8_Class *cls, V8_Class *base = 0) {
  int i;

  /* Store in function template */
  cls->tmpl = v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New());
  v8::Persistent<v8::FunctionTemplate>& tmpl = cls->tmpl;

  /* write constructor */
  tmpl->SetClassName(v8::String::New(cls->name));
  if (cls->ctor)
    tmpl->SetCallHandler(cls->ctor);


  v8::Local<v8::ObjectTemplate> clsInst = tmpl->PrototypeTemplate();
  clsInst->SetInternalFieldCount(1);
  if (cls->methods) {
    for (i = 0; cls->methods[i].name; i++)
      clsInst->Set(v8::String::New(cls->methods[i].name), v8::FunctionTemplate::New(cls->methods[i].func));
  }

  /* Apply accessors */
  if (cls->members) {

    for (i = 0; cls->members[i].name; i++) {
      clsInst->SetAccessor( v8::String::New(cls->members[i].name),
                            cls->members[i].getf,
                            cls->members[i].setf,
                            v8::Handle<v8::Value>(),
                            cls->members[i].accm,
                            cls->members[i].prop
                          );
    }
  }

  if (base != 0) {
    /* Inherit from base class */
    tmpl->Inherit(base->tmpl);

  }
  module->Set(v8::String::New(cls->name), tmpl);
}

/* ------------------------------------------------------------------------- */
SWIGRUNTIME void
V8_BindClasses(v8::Persistent<v8::ObjectTemplate>& module)
{
  int i;

  /* Roots */
  for (i = 0; swig_types[i]; i++) {
    if (!V8_HasBase(swig_types[i])) {
      if (swig_types[i]->clientdata)
        V8_BindClass(module, (V8_Class *)swig_types[i]->clientdata, 0);
    }
  }


  /* Derrived */
  for (i = 0; swig_types[i]; i++) {
    if (V8_HasBase(swig_types[i])) {
      if (swig_types[i]->clientdata) {
        V8_Class *cls = (V8_Class *)swig_types[i]->clientdata;
        swig_type_info *bse = V8_GetBaseClass(cls->base_names[0]);
        V8_BindClass(module, cls, bse ? (V8_Class *)bse->clientdata : 0);
      }
    }
  }
}


/* ------------------------------------------------------------------------- */
SWIGRUNTIME void
V8_InitBaseClasses(void)
{
  int i;
  for (i = 0; swig_types[i]; i++) {
    swig_type_info *inf = swig_types[i];
    V8_Class *cls = (V8_Class *)inf->clientdata;

    if (cls && cls->base_names != 0) {
      int j;
      for (j=0; cls->base_names[j]; ++j) {
        swig_type_info *binf = V8_GetBaseClass(cls->base_names[j]);
        if (binf)
          cls->bases[j] = (V8_Class *)binf->clientdata;
      }
    }

  }
}

/* ------------------------------------------------------------------------- */
SWIGEXPORT v8::Persistent<v8::ObjectTemplate> SWIG_init(v8::Persistent<v8::ObjectTemplate>& context)
{
  int i;

  // create the module template
  v8::Persistent<v8::ObjectTemplate> module = v8::Persistent<v8::ObjectTemplate>::New(v8::ObjectTemplate::New());
  context->Set(v8::String::New(SWIG_name), module);


  SWIG_InitializeModule((void *)(*module));
  SWIG_PropagateClientData();


  // Module global variables, constants
  for (i = 0; v8_constants[i].name; i++) {
    module->SetAccessor( v8::String::New(v8_constants[i].name),
                         v8_constants[i].getf,
                         v8_constants[i].setf,
                         v8::Handle<v8::Value>(),
                         v8_constants[i].accm,
                         v8_constants[i].prop
                       );
  }


  // Module global functions
  for (i = 0; v8_globals[i].name; i++)
    module->Set(v8::String::New(v8_globals[i].name), v8::FunctionTemplate::New(v8_globals[i].func));


  V8_InitBaseClasses();
  V8_BindClasses(module);
  return module;
}


