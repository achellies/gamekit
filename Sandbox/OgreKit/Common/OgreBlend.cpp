/*
-------------------------------------------------------------------------------
    This file is part of OgreKit.
    http://gamekit.googlecode.com/

    Copyright (c) 2009 Erwin Coumans & Charlie C
-------------------------------------------------------------------------------
 This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
-------------------------------------------------------------------------------
*/
#include "autogenerated/blender.h"
#include "OgreBlend.h"
#include "OgreLight.h"
#include "OgreCamera.h"
#include "OgreEntity.h"
#include "OgreSceneNode.h"
#include "OgreSceneManager.h"
#include "OgreSceneNode.h"
#include "OgreRoot.h"
#include "OgreResourceGroupManager.h"
#include "OgreMathUtils.h"
#include "OgreBlendConverter.h"
#include "OgreBlenderDefines.h"

#include "btBulletDynamicsCommon.h"

// ----------------------------------------------------------------------------
class MotionState : public btMotionState
{
protected:
	Ogre::SceneNode*		m_object;
	btRigidBody*	        m_rigidBody;

	void getWorldTransform(btTransform& worldTrans) const;
	void setWorldTransform(const btTransform& worldTrans);

public:

	MotionState(Ogre::SceneNode* object, btRigidBody *owner);
	virtual ~MotionState() {}
};

// ----------------------------------------------------------------------------
MotionState::MotionState(Ogre::SceneNode* object, btRigidBody *owner) :
		m_object(object), m_rigidBody(owner)
{
}

// ----------------------------------------------------------------------------
void MotionState::getWorldTransform(btTransform& worldTrans) const
{
	worldTrans.setIdentity();

	Ogre::Quaternion rot = m_object->_getDerivedOrientation();
	Ogre::Vector3 loc = m_object->_getDerivedPosition();

	worldTrans.setRotation(btQuaternion(rot.x, rot.y, rot.z, rot.w));
	worldTrans.setOrigin(btVector3(loc.x, loc.y, loc.z));
}


// ----------------------------------------------------------------------------
void MotionState::setWorldTransform(const btTransform& worldTrans)
{
	const btQuaternion &rot = worldTrans.getRotation();
	const btVector3 &loc = worldTrans.getOrigin();

	m_object->setOrientation(Ogre::Quaternion(rot.w(), rot.x(), rot.y(), rot.z()));
	m_object->setPosition(Ogre::Vector3(loc.x(), loc.y(), loc.z()));
}

// ----------------------------------------------------------------------------
OgreBlend::OgreBlend() :
		BulletBlendReaderNew(0),
		m_memBuf(0),
		m_manager(0),
		m_camera(0),
		m_blenScene(0),
		m_converter(0),
		m_group("General")
{
	setupPhysics();
}



// ----------------------------------------------------------------------------
OgreBlend::~OgreBlend()
{
	delete []m_memBuf;
	delete m_converter;
	delete m_destinationWorld;
	delete m_constraintSolver;
	delete m_dispatcher;
	delete m_pairCache;
	delete m_collisionConfiguration;
}

// ----------------------------------------------------------------------------
void OgreBlend::setupPhysics(void)
{
	m_collisionConfiguration = new btDefaultCollisionConfiguration();
	m_pairCache = new btDbvtBroadphase();
	m_dispatcher = new btCollisionDispatcher(m_collisionConfiguration);
	m_constraintSolver = new btSequentialImpulseConstraintSolver();
	m_destinationWorld = new btDiscreteDynamicsWorld(m_dispatcher,
	        m_pairCache,
	        m_constraintSolver,
	        m_collisionConfiguration);
}

// ----------------------------------------------------------------------------
int OgreBlend::readFile(char* memoryBuffer, int len, int verboseDumpAllTypes)
{
	if (m_converter)
		delete m_converter;

	int status = BulletBlendReaderNew::readFile(memoryBuffer, len, verboseDumpAllTypes);
	if (status)
		m_converter = new Ogre::BlendConverter(m_blendFile, m_group);

	return status;
}

// ----------------------------------------------------------------------------
bool OgreBlend::read(const Ogre::String& resource)
{
	FILE *fp = fopen(resource.c_str(), "rb");
	if (!fp)
	{
		printf("Blend loading failed!\n");
		return false;
	}

	if (m_memBuf)
		delete []m_memBuf;

	fseek(fp, 0L, SEEK_END);
	int len = ftell(fp);
	fseek(fp, 0L, SEEK_SET);


	m_memBuf = new char[len+1];
	fread(m_memBuf, len, 1, fp);
	fclose(fp);

	return readFile(m_memBuf, len, 0) != 0;
}

// ----------------------------------------------------------------------------
void OgreBlend::beginScene(Blender::Scene *scene)
{
	m_blenScene = scene;
	if (!m_blenScene)
	{
		printf("No scene present, cannot create objects!\n");
		return;
	}

	if (!m_manager)
		m_manager = Ogre::Root::getSingleton().createSceneManager(Ogre::ST_GENERIC, m_blenScene->id.name + 2);

	if (m_blenScene->world)
	{
		Blender::World *wo = m_blenScene->world;
		m_manager->setAmbientLight(Ogre::ColourValue(wo->ambr, wo->ambg, wo->ambb));
	}

	if (m_destinationWorld)
		m_destinationWorld->setGravity(btVector3(0, 0, -10));
}


// ----------------------------------------------------------------------------
void OgreBlend::convertLogicBricks()
{
}


// ----------------------------------------------------------------------------
void OgreBlend::createParentChildHierarchy()
{
	// apply the correct bullet hierarchy

	int i;
	btAlignedObjectArray<btCollisionObject*>children;

	for (i = 0;i < this->m_destinationWorld->getNumCollisionObjects();i++)
	{
		btCollisionObject* childColObj = m_destinationWorld->getCollisionObjectArray()[i];
		BulletObjectContainer* childNode = (BulletObjectContainer*)childColObj->getUserPointer();
		if (!childNode)
			continue;
		Blender::Object* obj = (Blender::Object*)childNode->m_userPointer;
		if (!obj)
			continue;
		if (obj->parent)
			children.push_back(childColObj);
	}

	for (i = 0;i < children.size();i++)
	{
		btCollisionObject* childColObj = children[i];
		m_destinationWorld->removeCollisionObject(childColObj);
		///disconnect the rigidbody update for child objects
		childColObj->setUserPointer(0);
	}
}


// ----------------------------------------------------------------------------
void* OgreBlend::createGraphicsObject(Blender::Object* tmpObject, class btCollisionObject* bulletObject)
{

	if (!m_manager || tmpObject->type != OB_MESH)
		return 0;


	if (tmpObject->parent && tmpObject->parent->type == OB_ARMATURE)
		m_converter->createManualSkeleton(tmpObject->parent);

	m_converter->createManualMesh(tmpObject);

	Ogre::Entity *ent = m_manager->createEntity(tmpObject->id.name + 2, tmpObject->id.name + 2);
	Ogre::SceneNode *node = m_manager->getRootSceneNode()->createChildSceneNode(tmpObject->id.name + 2);
	node->attachObject(ent);

	applyObjectProperties(tmpObject, node);
	btRigidBody* body = bulletObject ? btRigidBody::upcast(bulletObject) : 0;

	if (body)
	{
		if (!bulletObject->isStaticOrKinematicObject())
		{
			MotionState *rb = new MotionState(node, body);
			body->setMotionState(rb);
		}
	}

	tmpObject->vnode = bulletObject;
	BulletObjectContainer *cont = new BulletObjectContainer;
	cont->m_userPointer = tmpObject;
	return cont;
}


// ----------------------------------------------------------------------------
void OgreBlend::addArmature(Blender::Object* tmpObject)
{
	// TODO, add skeleton object for new animation
	addEmpty(tmpObject);
}



// ----------------------------------------------------------------------------
void OgreBlend::addEmpty(Blender::Object* tmpObject)
{
	if (!m_manager)
		return;

	Ogre::SceneNode *node = m_manager->getRootSceneNode()->createChildSceneNode(tmpObject->id.name + 2);
	applyObjectProperties(tmpObject, node);
}

// ----------------------------------------------------------------------------
void OgreBlend::addCamera(Blender::Object* tmpObject)
{

	if (!m_manager || tmpObject->type != OB_CAMERA)
		return;

	Ogre::Camera *cam = m_manager->createCamera(tmpObject->id.name + 2);
	Ogre::SceneNode *node = m_manager->getRootSceneNode()->createChildSceneNode(tmpObject->id.name + 2);

	node->attachObject(cam);
	applyObjectProperties(tmpObject, node);

	Blender::Camera* camera = static_cast<Blender::Camera*>(tmpObject->data);


	cam->setNearClipDistance(camera->clipsta);
	cam->setFarClipDistance(camera->clipend);
	cam->setFOVy(
	    Ogre::Degree(
	        Ogre::Real(360) * Ogre::Math::ATan(Ogre::Real(16) /
	                                           camera->lens).valueRadians() / Ogre::Math::PI)
	);

	if (m_blenScene->camera == tmpObject)
		m_camera = cam;
}


// ----------------------------------------------------------------------------
void OgreBlend::addLight(Blender::Object* tmpObject)
{

	if (!m_manager || tmpObject->type != OB_LAMP)
		return;

	Ogre::Light *light = m_manager->createLight(tmpObject->id.name + 2);
	Ogre::SceneNode *node = m_manager->getRootSceneNode()->createChildSceneNode(tmpObject->id.name + 2);

	node->attachObject(light);
	applyObjectProperties(tmpObject, node);


	Blender::Lamp* la = static_cast<Blender::Lamp*>(tmpObject->data);

	// convert/set light properties
	Ogre::Light::LightTypes type = Ogre::Light::LT_POINT;
	if (la->type != LA_LOCAL)
		type = la->type == LA_SPOT ? Ogre::Light::LT_SPOTLIGHT : Ogre::Light::LT_DIRECTIONAL;
	light->setType(type);

	Ogre::ColourValue diffuse = Ogre::ColourValue::Black, specular = Ogre::ColourValue::Black;

	Ogre::Real power = la->energy;
	if (la->mode & LA_NEG)
		power = -power;


	if (!(la->mode & LA_NO_DIFF))
		diffuse = Ogre::ColourValue(la->r, la->g, la->b);

	if (!(la->mode & LA_NO_SPEC))
		specular = Ogre::ColourValue(la->r, la->g, la->b);

	light->setSpecularColour(specular);
	light->setDiffuseColour(diffuse *power);
	light->setPowerScale(power);

	light->setAttenuation(
	    100000.0,
	    1.0,
	    la->att1 / la->dist,
	    la->att2 / (la->dist * la->dist)
	);


	if (type == Ogre::Light::LT_SPOTLIGHT || type == Ogre::Light::LT_DIRECTIONAL)
	{
		light->setDirection(Ogre::Vector3::NEGATIVE_UNIT_Z);

		if (type == Ogre::Light::LT_SPOTLIGHT)
		{
			Ogre::Degree inner, outer;
			inner = Ogre::Radian(la->spotblend).valueDegrees();
			outer = la->spotsize > 128 ? 128 : la->spotsize;
			if (inner > outer) inner = outer;
			light->setSpotlightRange(inner, outer, Ogre::Real(128.0) * la->spotblend);
		}
	}
}

// ----------------------------------------------------------------------------
void OgreBlend::applyObjectProperties(Blender::Object* tmpObject, Ogre::SceneNode *obj)
{
	if (!m_manager || !tmpObject || !obj)
		return;


	Ogre::Quaternion quat;
	Ogre::Vector3 loc, scale;

	Ogre::Matrix4 obmat = Ogre::MathUtils::getFromFloat(tmpObject->obmat);

	if (!tmpObject->parent)
		Ogre::MathUtils::extractTransform(obmat, loc, quat, scale);
	else
	{
		Ogre::Matrix4 parent = Ogre::MathUtils::getFromFloat(tmpObject->parent->obmat);

		obmat = parent.inverse() * obmat;
		Ogre::MathUtils::extractTransform(obmat, loc, quat, scale);

		// blender lists are sorted internally
		// so parents will be first in the base loop
		if (m_manager->hasSceneNode(tmpObject->parent->id.name + 2))
		{
			Ogre::SceneNode *parob = m_manager->getSceneNode(tmpObject->parent->id.name + 2);

			if (obj->getParentSceneNode())
				obj->getParentSceneNode()->removeChild(obj);

			parob->addChild(obj);
		}
	}

	obj->setPosition(loc);
	obj->setOrientation(quat);
	obj->setScale(scale);
	obj->setInitialState();
}
