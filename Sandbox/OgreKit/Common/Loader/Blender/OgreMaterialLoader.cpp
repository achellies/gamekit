/*
-------------------------------------------------------------------------------
	This file is part of the Ogre GameKit port.
	http://gamekit.googlecode.com/

	Copyright (c) 2009 Charlie C.
-------------------------------------------------------------------------------
 This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
	 claim that you wrote the original software. If you use this software
	 in a product, an acknowledgment in the product documentation would be
	 appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
	 misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
-------------------------------------------------------------------------------
*/
#include "OgreRoot.h"
#include "OgreRenderSystem.h"
#include "OgreHighLevelGpuProgram.h"
#include "OgreHardwarePixelBuffer.h"
#include "OgreHighLevelGpuProgramManager.h"
#include "OgreGpuProgramManager.h"
#include "OgreGpuProgram.h"
#include "OgreMaterialSerializer.h"
#include "OgreMaterialManager.h"
#include "OgreTechnique.h"
#include "OgrePass.h"
#include "OgreMaterialManager.h"
#include "OgreLoaderUtils.h"
#include "OgreMathUtils.h"
#include "OgreUtils.h"
#include "OgreMeshUtils.h"
#include "OgreTextureLoader.h"
#include "OgreMaterialLoader.h"
#include "OgreBlenderDefines.h"
#include "OgreBlendConverter.h"
#include "autogenerated/blender.h"
#include "bBlenderFile.h"
#include "bMain.h"



using namespace Ogre;



//-----------------------------------------------------------------------------
MaterialUtils::MaterialUtils(BlendConverter *fp) :
		m_file(fp), m_tech(0), m_pass(0), m_blenderMat(0),
		m_blenderMesh(0), m_ogreMat(0),
		m_multiPass(false)
{
	OGRE_ASSERT(m_file);
}

//-----------------------------------------------------------------------------
Pass *MaterialUtils::getOrCreatePass(size_t idx)
{
	if (!m_ogreMat || !m_blenderMat || !m_tech)
		return 0;

	size_t passc= (size_t)m_tech->getNumPasses();


	if (idx < passc)
		return m_tech->getPass((unsigned short)idx);

	if (idx > passc)
		return m_tech->getPass((unsigned short)(passc - 1));

	return m_tech->createPass();
}

//-----------------------------------------------------------------------------
bool MaterialUtils::lampTest(void)
{
	OGRE_ASSERT(m_file);
	bParse::bMain *mp= m_file->getInternalFile()->getMain();
	return mp->getLamp()->size() != 0;
}

//-----------------------------------------------------------------------------
void MaterialUtils::handleStd(void)
{
	if (!m_ogreMat || !m_blenderMat || !m_tech)
		return;

	Pass *pass= getOrCreatePass(0);

	/// base colors
	ColourValue diffuse= ColourValue(m_blenderMat->r, m_blenderMat->g, m_blenderMat->b, m_blenderMat->alpha);
	ColourValue spec=   ColourValue(m_blenderMat->specr, m_blenderMat->specg, m_blenderMat->specb, 1.0);

	/// use light by default
	if (!(m_blenderMat->mode & MA_SHLESS) && lampTest())
	{
		pass->setLightingEnabled(true);

		pass->setShininess(m_blenderMat->har / Real(4.0));

		pass->setAmbient(diffuse *m_blenderMat->amb);
		pass->setDiffuse(diffuse *(m_blenderMat->emit + m_blenderMat->ref));
		pass->setSpecular(spec *m_blenderMat->spec);

		if (m_blenderMat->emit > 0)
			pass->setSelfIllumination(diffuse *m_blenderMat->emit);
		else
			pass->setSelfIllumination(ColourValue::Black);

		if (m_blenderMat->alpha < 1.0)
		{
			pass->setSceneBlending(SBT_TRANSPARENT_ALPHA);
			pass->setAlphaRejectSettings(CMPF_ALWAYS_PASS, 0);
		}
		else
			pass->setSceneBlending(SBF_ONE, SBF_ZERO);
	}
	else
		pass->setLightingEnabled(false);

	if (m_blenderMat->mode & MA_WIRE)
		pass->setPolygonMode(PM_WIREFRAME);
	else
		pass->setPolygonMode(PM_SOLID);

	/// vertex color paint overide diffuse
	if (m_blenderMat->mode & MA_VERTEXCOLP)
		pass->setVertexColourTracking(TVC_DIFFUSE);
	/// vertex color light
	else if (m_blenderMat->mode & MA_VERTEXCOL)
		pass->setVertexColourTracking(TVC_DIFFUSE | TVC_AMBIENT | TVC_EMISSIVE | TVC_SPECULAR);
	/// use normal diffuse
	else
		pass->setVertexColourTracking(TVC_NONE);

	/// overide mist settings
	if (m_blenderMat->mode &MA_NOMIST)
		pass->setFog(true);
	else
		pass->setFog(false);

	size_t txcnt= getNumTextures();
	for (size_t i=0; i<txcnt; i++)
	{
		Blender::MTex *mt= getTexture(i);
		if (mt && mt->tex && mt->tex->ima)
		{
			TextureUnitState *st= addTextureUnit(pass, mt);
			if (st)
				st->setColourOperation(LBO_MODULATE);
		}
	}
}

//-----------------------------------------------------------------------------
size_t MaterialUtils::getNumTextures(void)
{
	if (!m_ogreMat || !m_blenderMat || !m_tech)
		return 0;

	if (m_textures.empty())
	{
		if (m_blenderMat->mtex != 0)
		{
			for (int i= 0; i<MAX_MTEX; i++)
			{
				if (m_blenderMat->mtex[i] != 0)
				{
					Blender::MTex *mtex= m_blenderMat->mtex[i];
					if (mtex && mtex->tex != 0)
					{
						if (mtex->tex->type == TEX_IMAGE)
							m_textures.push_back(mtex);
					}
				}
			}
		}
	}

	return m_textures.size();
}

//-----------------------------------------------------------------------------
Blender::MTex *MaterialUtils::getTexture(size_t i)
{
	return (i < m_textures.size()) ? m_textures.at(i) : 0;
}


Blender::MTex *MaterialUtils::getTexture(int mapto, int fallback)
{
	for (size_t i=0; i<m_textures.size(); i++)
	{
		Blender::MTex *mt= m_textures[i];
		if (mt && mt->tex && mt->tex->ima)
		{
			if (mt->mapto & mapto)
				return mt;
		}
	}
	if (fallback != -1)
		return getTexture(fallback);
	return 0;
}

//-----------------------------------------------------------------------------
MaterialUtils::MTexList MaterialUtils::getTextures(int mapto)
{
	MTexList ret;
	for (size_t i=0; i<m_textures.size(); i++)
	{
		Blender::MTex *mt= m_textures[i];

		if (mt && mt->tex && mt->tex->ima)
		{
			if (mt->mapto & mapto)
				ret.push_back(mt);
		}
	}
	return ret;
}

//-----------------------------------------------------------------------------
int MaterialUtils::getUVLayer(Blender::MTex *te)
{
	if (!m_blenderMesh || !te || !m_ogreMat || !m_blenderMat || !m_tech)
		return TL_UV0;

	if (!(te->texco & TEXCO_UV))
		return TL_UV0;

	StringVector names;
	if (m_blenderMesh->fdata.layers)
	{
		Blender::CustomDataLayer *cd= (Blender::CustomDataLayer*)m_blenderMesh->fdata.layers;

		if (cd)
		{
			for (int i= 0; i < m_blenderMesh->fdata.totlayer; i++)
			{
				if (cd[i].type == CD_MTFACE)
					names.push_back(String(cd[i].name));
			}
		}
	}

	int layer= TL_UV0;
	for (size_t i= 0; i < names.size(); i++)
	{
		if (names[i] == te->uvname)
		{
			layer= TL_UV0 + (int)i;
			break;
		}
	}
	return layer;
}

//-----------------------------------------------------------------------------
TextureUnitState *MaterialUtils::addTextureUnit(Pass *ptr, Blender::MTex *tex)
{
	if (!tex) return 0;
	if (!tex->tex) return 0;

	return addTextureUnit(ptr, tex->tex->ima, getUVLayer(tex));

}

//-----------------------------------------------------------------------------
void MaterialUtils::addTextureUnit(MaterialPtr ptr, Blender::Image *ima, int layer_nr)
{
	/// creat for pass
	addTextureUnit(ptr->getTechnique(0)->getPass(0), ima, layer_nr);
}

//-----------------------------------------------------------------------------
TextureUnitState *MaterialUtils::addTextureUnit(Pass *pass, Blender::Image *ima, int layer_nr)
{
	/// can only use packed file or file path
	/// ImBuf is internal to blender

	String base = Utils::findResourceBase(ima->name);
	if (!ima && !ima->packedfile && !base.empty())
		return 0;


	m_file->registerImage(ima);

	TextureUnitState *state= 0;
	if (!base.empty())
		state= pass->createTextureUnitState(base);
	else
		state= pass->createTextureUnitState(OGRE_IDNAME(ima));

	if (state && layer_nr >= TL_UV0 && layer_nr <= TL_UV7)
		state->setTextureCoordSet(layer_nr);
	if (state)
	{
		state->setTextureAddressingMode(ima->tpageflag & IMA_CLAMP_U ? TextureUnitState::TAM_CLAMP : TextureUnitState::TAM_WRAP,
		                                ima->tpageflag & IMA_CLAMP_V ? TextureUnitState::TAM_CLAMP : TextureUnitState::TAM_WRAP,
		                                TextureUnitState::TAM_WRAP
		                               );
	}
	return state;
}

//-----------------------------------------------------------------------------
bool MaterialUtils::applyTexFace(int flags, int alpha)
{
	if (!m_ogreMat || !m_tech)
		return false;

	if (flags &TF_INVISIBLE)
	{
		m_ogreMat->setReceiveShadows(false);
		m_tech->setColourWriteEnabled(false);
		m_tech->setDepthWriteEnabled(false);
		m_tech->setLightingEnabled(false);

		// skip the rest
		return false;
	}

	if (flags & TF_LIGHT)
		m_tech->setLightingEnabled(lampTest());

	if (flags &TF_TWOSIDE)
	{
		m_tech->setCullingMode(CULL_NONE);
		m_tech->setManualCullingMode(MANUAL_CULL_NONE);
	}

	if (alpha &TF_ALPHA)
	{
		m_tech->getPass(0)->setAlphaRejectSettings(CMPF_GREATER_EQUAL, 128);
		m_tech->setSceneBlending(SBF_SOURCE_ALPHA, SBF_ONE_MINUS_SOURCE_ALPHA);
	}
	if (alpha &TF_ADD)
		m_tech->setSceneBlending(SBF_ONE, SBF_ONE);

	return true;
}

//-----------------------------------------------------------------------------
void MaterialUtils::getOgreMaterialFromMaterial(MaterialPtr ptr, Blender::Material *matr, Blender::Mesh *me, int flags)
{
	if (ptr.isNull()) return;

	m_ogreMat= ptr.getPointer();
	m_blenderMat= matr;
	m_blenderMesh= me;
	m_tech= m_ogreMat->getTechnique(0);

	m_ogreMat->setReceiveShadows(false);

	if (!applyTexFace(flags, 0))
		return;

	getNumTextures();
	handleStd();
}

//-----------------------------------------------------------------------------
void MaterialUtils::setOgreMaterialDefault(MaterialPtr ptr, bool lighting, int flags, int alpha)
{
	if (ptr.isNull()) return;

	m_ogreMat= ptr.getPointer();
	m_tech= m_ogreMat->getTechnique(0);

	ptr->setLightingEnabled(lighting && lampTest());
	ptr->setDiffuse(Real(0.8), Real(0.8), Real(0.8), Real(1.0));
	applyTexFace(flags, alpha);
}
