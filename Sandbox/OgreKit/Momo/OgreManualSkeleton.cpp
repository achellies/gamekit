/*
-------------------------------------------------------------------------------
	This file is part of OgreKit.
	http://gamekit.googlecode.com/

	Copyright (c) 2009 Charlie C.
-------------------------------------------------------------------------------
 This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
	 claim that you wrote the original software. If you use this software
	 in a product, an acknowledgment in the product documentation would be
	 appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
	 misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
-------------------------------------------------------------------------------
*/
#include "OgreManualSkeleton.h"
#include "OgreManualBone.h"
#include "OgreEntity.h"
#include "OgreBone.h"
#include "OgreSkeletonInstance.h"
#include "OgreAction.h"
#include "OgreActionChannel.h"
#include "OgreBlenderDefines.h"
#include "autogenerated/blender.h"

using namespace Ogre;



ManualSkeleton::ManualSkeleton(Entity *entity) :
	m_animatedMesh(entity)
{
	if (m_animatedMesh->hasSkeleton())
		modifyBones();
}


ManualSkeleton::~ManualSkeleton()
{
	HashTableIterator<Actions> iter(m_actions);
	while (iter.hasMoreElements())
		delete iter.getNext().second;

	HashTableIterator<Bones> biter(m_bones);
	while (biter.hasMoreElements())
		delete biter.getNext().second;
}


void ManualSkeleton::modifyBones(void)
{
	OGRE_ASSERT(m_animatedMesh);

	SkeletonInstance *skel = m_animatedMesh->getSkeleton();

	unsigned short nr = skel->getNumBones();
	for (unsigned short i = 0; i < nr; ++i)
	{
		Bone *bone = skel->getBone(i);

		// flag manual
		bone->setManuallyControlled(true);


		ManualBone *mb = new ManualBone(bone);
		m_bones.insert(bone->getName(), mb);

		if (bone->getParent())
		{
			Ogre::Bone* pb = (Ogre::Bone*)bone->getParent();
			size_t pos = m_bones.find(pb->getName());

			// assert because parents should already created
			OGRE_ASSERT(pos != OGRE_NPOS);

			mb->m_parent = m_bones.at(pos);
		}
	}
}




Action* ManualSkeleton::createAction(const String& name)
{
	if (m_actions.find(name) != OGRE_NPOS)
	{
		OGRE_EXCEPT(Ogre::Exception::ERR_DUPLICATE_ITEM,
			"Duplicate action",
			"ManualSkeleton::createAction");
	}

	Action *act = new Action(name);
	m_actions.insert(act->getName(), act);
	return act;
}


Action* ManualSkeleton::getAction(const String& name)
{
	size_t pos;
	if ((pos = m_actions.find(name)) == OGRE_NPOS)
	{
		OGRE_EXCEPT(Ogre::Exception::ERR_ITEM_NOT_FOUND,
			"Action not found",
			"ManualSkeleton::getAction");
	}

	return m_actions.at(pos);
}


ManualBone* ManualSkeleton::getBone(const String& name)
{
	size_t pos;
	if ((pos = m_bones.find(name)) == OGRE_NPOS)
	{
		OGRE_EXCEPT(Ogre::Exception::ERR_ITEM_NOT_FOUND,
			"Bone not found",
			"ManualSkeleton::getBone");
	}
	return m_bones.at(pos);
}



Blender::bActionChannel *ManualSkeleton_findActionChannel(Blender::bAction *bact, const char *name)
{
	Blender::bActionChannel *ac = (Blender::bActionChannel*)bact->chanbase.first;
	while (ac)
	{
		if (!strcmp(ac->name, name)) break;
		ac = ac->next;
	}
	return ac;
}



Action* ManualSkeleton::createAction(Blender::bAction *bact)
{
	OGRE_ASSERT(m_animatedMesh && bact && m_animatedMesh->hasSkeleton());

	if (hasAction(bact->id.name + 2))
	{
		OGRE_EXCEPT(Ogre::Exception::ERR_DUPLICATE_ITEM,
			"Duplicate action",
			"ManualSkeleton::setAction");
	}

	SkeletonInstance *skeleton = m_animatedMesh->getSkeleton();
	Action *act = createAction(bact->id.name + 2);

	Vector2 range(FLT_MAX, -FLT_MAX);

	HashTableIterator<Bones> it(m_bones);
	while (it.hasMoreElements())
	{
		ManualBone *bone = it.getNext().second;

		Blender::bActionChannel *achan = ManualSkeleton_findActionChannel(bact, bone->m_bone->getName().c_str());

		if (achan)
		{

			ActionChannel *chan = new ActionChannel(act, bone);
			act->addChannel(chan);


			if (achan->ipo)
			{
				Blender::IpoCurve* icu = (Blender::IpoCurve*)achan->ipo->curve.first;
				while (icu)
				{
					if (icu->bezt)
					{
						int code = -1;
						switch (icu->adrcode)
						{
						case AC_QUAT_W: { code = SC_ROT_W;  break; }
						case AC_QUAT_X: { code = SC_ROT_X;  break; }
						case AC_QUAT_Y: { code = SC_ROT_Y;  break; }
						case AC_QUAT_Z: { code = SC_ROT_Z;  break; }
						case AC_LOC_X:  { code = SC_LOC_X;  break; }
						case AC_LOC_Y:  { code = SC_LOC_Y;  break; }
						case AC_LOC_Z:  { code = SC_LOC_Z;  break; }
						case AC_SIZE_X: { code = SC_SCL_X;  break; }
						case AC_SIZE_Y: { code = SC_SCL_Y;  break; }
						case AC_SIZE_Z: { code = SC_SCL_Z;  break; }
						}


						/// ignore any other codes
						if (code != -1)
						{
							BezierSpline *spline = new BezierSpline(code);

							switch (icu->ipo)
							{
							case 0://BEZT_IPO_CONST:
								spline->setInterpolationMethod(BezierSpline::BEZ_CONSTANT);
								break;
							case 1://BEZT_IPO_LIN:
								spline->setInterpolationMethod(BezierSpline::BEZ_LINEAR);
								break;
							case 2://BEZT_IPO_BEZ:
								spline->setInterpolationMethod(BezierSpline::BEZ_CUBIC);
								break;
							}

							Blender::BezTriple *bezt = icu->bezt;
							for (int c = 0; c < icu->totvert; c++, bezt++)
							{
								BezierVertex v;

								v.h1[0] = bezt->vec[0][0];
								v.h1[1] = bezt->vec[0][1];
								v.cp[0] = bezt->vec[1][0];
								v.cp[1] = bezt->vec[1][1];
								v.h2[0] = bezt->vec[2][0];
								v.h2[1] = bezt->vec[2][1];

								
								// calculate global time
								if (range.x > v.cp[0]) range.x = v.cp[0];
								if (range.y < v.cp[0]) range.y = v.cp[0];
								spline->addVertex(v);
							}
							if (spline->getNumVerts())
								chan->addSpline(spline);
						}
					}
					icu = icu->next;
				}

			}
		}
	}
	// apply time range
	act->setStart(range.x);
	act->setEnd(range.y);
	return act;
}

