/*
bParse
Copyright (c) 2006-2009 Charlie C & Erwin Coumans  http://gamekit.googlecode.com

This software is provided 'as-is', without any express or implied warranty.
In no event will the authors be held liable for any damages arising from the use of this software.
Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it freely,
subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
*/

#include "bBlenderFile.h"
#include "bMain.h"
#include "bDefines.h"
#include "bDNA.h"
#include "autogenerated/blender.h" // for Blender::ListBase

using namespace bParse;

bBlenderFile::bBlenderFile(const char* fileName)
:bFile(fileName, "BLENDER")
{
	mMain= new bMain(this, fileName, mVersion);
}



bBlenderFile::bBlenderFile(char *memoryBuffer, int len)
:bFile(memoryBuffer,len, "BLENDER"),
mMain(0)
{
	mMain= new bMain(this, "memoryBuf", mVersion);
}


bBlenderFile::~bBlenderFile()
{
	delete mMain;
}


bMain* bBlenderFile::getMain()
{
	return mMain;
}

// ----------------------------------------------------- //
void bBlenderFile::parseData()
{
	print ("Building datablocks");
	print ("Chunk size = " << CHUNK_HEADER_LEN);
	print ("File chunk size = " << ChunkUtils::getOffset(mFlags));

	const bool swap = (mFlags&FD_ENDIAN_SWAP)!=0;
	


	char *dataPtr = mFileBuffer+mDataStart;

	bChunkInd dataChunk;
	dataChunk.code = 0;


	//dataPtr += ChunkUtils::getNextBlock(&dataChunk, dataPtr, mFlags);
	int seek = ChunkUtils::getNextBlock(&dataChunk, dataPtr, mFlags);
	//dataPtr += ChunkUtils::getOffset(mFlags);
	char *dataPtrHead = 0;

	while (dataChunk.code != DNA1)
	{
		



		// one behind
		if (dataChunk.code == SDNA) break;
		//if (dataChunk.code == DNA1) break;

		// same as (BHEAD+DATA dependancy)
		dataPtrHead = dataPtr+ChunkUtils::getOffset(mFlags);
		char *id = readStruct(dataPtrHead, dataChunk);

		// lookup maps
		if (id)
		{
			mLibPointers.insert(std::make_pair(dataChunk.oldPtr, (bStructHandle*)id));

			mMain->m_chunks.push_back(dataChunk);
			// block it
			bListBasePtr *listID = mMain->getListBasePtr(dataChunk.code);
			if (listID)
				listID->push_back((bStructHandle*)id);
		}

		if (dataChunk.code == GLOB)
		{
			m_glob = (bStructHandle*) id;
		}

		// next please!
		dataPtr += seek;

		seek =  ChunkUtils::getNextBlock(&dataChunk, dataPtr, mFlags);
		if (seek < 0)
			break;
	}

}

void	bBlenderFile::addDataBlock(char* dataBlock)
{
	mMain->addDatablock(dataBlock);
}


void bBlenderFile::resolvePointersMismatch()
{
//	printf("resolvePointersStructMismatch\n");

	int i;
	for (i=0;i<	m_listBaseFixupArray.size();i++)
	{
		char* cur = m_listBaseFixupArray.at(i);
		void** ptrptr = (void**) cur;
	

        Blender::ListBase* inspect = (Blender::ListBase*) ptrptr;
        inspect->first = mMain->findLibPointer(inspect->first);
        inspect->last = mMain->findLibPointer(inspect->last);
	}
	
	for (i=0;i<	m_pointerFixupArray.size();i++)
	{
		char* cur = m_pointerFixupArray.at(i);
		void** ptrptr = (void**) cur;
		void* ptr = *ptrptr;
		ptr = mMain->findLibPointer(ptr);
		if (ptr)
		{
			//printf("Fixup pointer!\n");
			*(ptrptr) = ptr;
		} else
		{
//			printf("pointer not found: %x\n",cur);
		}
	}
}




///this loop only works fine if the Blender DNA structure of the file matches the headerfiles
void bBlenderFile::resolvePointersChunk(bChunkInd& dataChunk)
{

	short int* oldStruct = mFileDNA->getStruct(dataChunk.dna_nr);
	short oldLen = mFileDNA->getLength(oldStruct[0]);
	char* structType = mFileDNA->getType(oldStruct[0]);

	char* cur	= (char*)mMain->findLibPointer(dataChunk.oldPtr);
	for (int block=0; block<dataChunk.nr; block++)
	{
		resolvePointersStructRecursive(cur,dataChunk.dna_nr);
		cur += oldLen;
	}
}


void bBlenderFile::resolvePointersStructRecursive(char *strcPtr, int dna_nr)
{
	
		char* memType;
		char* memName;
		short	firstStructType = mFileDNA->getStruct(0)[0];


		char* elemPtr= strcPtr;

		short int* oldStruct = mFileDNA->getStruct(dna_nr);
		
		int elementLength = oldStruct[1];
		oldStruct+=2;


		for (int ele=0; ele<elementLength; ele++, oldStruct+=2)
		{

			memType = mFileDNA->getType(oldStruct[0]);
			memName = mFileDNA->getName(oldStruct[1]);
			//printf("%s %s\n",memType,memName);
			if (memName[0] == '*')
			{
				void** ptrptr = (void**) elemPtr;
				void* ptr = *ptrptr;
				ptr = mMain->findLibPointer(ptr);
				if (ptr)
				{
//					printf("Fixup pointer at 0x%x from 0x%x to 0x%x!\n",ptrptr,*ptrptr,ptr);
					*(ptrptr) = ptr;
				} else
				{
//					printf("Cannot fixup pointer at 0x%x from 0x%x to 0x%x!\n",ptrptr,*ptrptr,ptr);
				}
			} else
			{
				int revType = mFileDNA->getReverseType(oldStruct[0]);
				if (oldStruct[0]>=firstStructType) //revType != -1 && 
				{
					resolvePointersStructRecursive(elemPtr,revType);
				}
			}
#if 0
		  if (strcmp(memType,"ListBase")==0)
            {
            //    printf("Fixup ListBase!\n");
                void** ptrptr = (void**) elemPtr;
                Blender::ListBase* inspect = (Blender::ListBase*)ptrptr;
                inspect->first = mMain->findLibPointer(inspect->first);
                inspect->last = mMain->findLibPointer(inspect->last);

                if (inspect->first && inspect->last)
                {
                    // (ptrptr) = (void**)inspect;

                }
            }
#endif

			int size = mFileDNA->getElementSize(oldStruct[0], oldStruct[1]);
			elemPtr+=size;
			
		}
}


///Resolve pointers replaces the original pointers in structures, and linked lists by the new in-memory structures
void bBlenderFile::resolvePointers()
{
	printf("resolvePointers start\n");
	char *dataPtr = mFileBuffer+mDataStart;

	if (1) //mFlags & (FD_BITS_VARIES | FD_VERSION_VARIES))
	{
		resolvePointersMismatch();	
	}
	
	{
		for (int i=0;i<mMain->m_chunks.size();i++)
		{
			bChunkInd& dataChunk = mMain->m_chunks.at(i);

			if (mFileDNA->flagEqual(dataChunk.dna_nr))
			{
				//dataChunk.len
				short int* oldStruct = mFileDNA->getStruct(dataChunk.dna_nr);
				char* oldType = mFileDNA->getType(oldStruct[0]);
				
				//printf("------------------------------------------");
				//printf("Struct %s\n",oldType);

				

				//skip certain structures
		///Warning: certain structures might need to be skipped, such as CustomDataLayer, Link etc. Not skipping them causes crashes.
				//if (strcmp(oldType,"CustomDataLayer")==0)
				//{
				//	Blender::CustomData* data = (Blender::CustomData*)mMain->findLibPointer(dataChunk.oldPtr);
				//	data->totlayer = 0;
				//	
				//}
//					continue;
				//if (strcmp(oldType,"Mesh")==0)
				//{
				//	//printf("mesh\n");
				//}

//				if (strcmp(oldType,"Link")==0)
//					continue;
		///Other types are skipped just because they dont' containt pointers, just for optimization (MVert,MEdge,MFace,ScrVert)
//				if (strcmp(oldType,"MVert")==0)
//					continue;
//				if (strcmp(oldType,"MEdge")==0)
//					continue;
//				if (strcmp(oldType,"MFace")==0)
//					continue;
//				if (strcmp(oldType,"ScrVert")==0)
//					continue;

				resolvePointersChunk(dataChunk);
			} else
			{
				//printf("skipping mStruct\n");
			}
		}
	}
	
	printf("resolvePointers end\n");
}

void	bBlenderFile::writeChunks(FILE* fp)
{
	for (int i=0;i<mMain->m_chunks.size();i++)
	{
		bChunkInd& dataChunk = mMain->m_chunks.at(i);
		
		///update dataChunk (it still refers to old file chunk)
		dataChunk.oldPtr = mMain->findLibPointer(dataChunk.oldPtr);
		// Ouch! need to rebuild the struct
		short *oldStruct,*curStruct;
		char *oldType, *newType;
		int oldLen, curLen, reverseOld;

		oldStruct = mFileDNA->getStruct(dataChunk.dna_nr);
		oldType = mFileDNA->getType(oldStruct[0]);
		oldLen = mFileDNA->getLength(oldStruct[0]);

		///don't try to convert Link block data, just memcpy it. Other data can be converted.
		reverseOld = mMemoryDNA->getReverseType(oldType);
		if ((reverseOld!=-1))
		{
			// make sure it's here
			//assert(reverseOld!= -1 && "getReverseType() returned -1, struct required!");
			//
			curStruct = mMemoryDNA->getStruct(reverseOld);
			newType = mMemoryDNA->getType(curStruct[0]);
			// make sure it's the same
			assert((strcmp(oldType, newType)==0) && "internal error, struct mismatch!");

			
			curLen = mMemoryDNA->getLength(curStruct[0]);
			dataChunk.dna_nr = reverseOld;
			if (strcmp("Link",oldType)!=0)
			{
				dataChunk.len = curLen * dataChunk.nr;
			} else
			{
				printf("keep length of link = %d\n",dataChunk.len);
			}
		
			//write the structure header
			fwrite(&dataChunk,sizeof(bChunkInd),1,fp);
			


			short int* curStruct1 = mMemoryDNA->getStruct(dataChunk.dna_nr);
			assert(curStruct1 == curStruct);

			//short oldLen = mFileDNA->getLength(oldStruct[0]);
			char* cur	= (char*)dataChunk.oldPtr;//(char*)mMain->findLibPointer(dataChunk.oldPtr);

			//write the actual contents of the structure(s)
			fwrite(cur,dataChunk.len,1,fp);
		} else
		{
			printf("serious error, struct mismatch: don't write\n");
		}
	}
	
}

// 32 && 64 bit versions
extern unsigned char DNAstr[];
extern int DNAlen;

//unsigned char DNAstr[]={0};
//int DNAlen=0;


extern unsigned char DNAstr64[];
extern int DNAlen64;


void	bBlenderFile::writeDNA(FILE* fp)
{

	bChunkInd dataChunk;
	dataChunk.code = DNA1;
	dataChunk.dna_nr = 0;
	dataChunk.nr = 1;
	
	if (VOID_IS_8)
	{
		dataChunk.len = DNAlen64;
		dataChunk.oldPtr = DNAstr64;
		fwrite(&dataChunk,sizeof(bChunkInd),1,fp);
		fwrite(DNAstr64, DNAlen64,1,fp);
	}
	else
	{
		dataChunk.len = DNAlen;
		dataChunk.oldPtr = DNAstr;
		fwrite(&dataChunk,sizeof(bChunkInd),1,fp);
		fwrite(DNAstr, DNAlen,1,fp);
	}
}
